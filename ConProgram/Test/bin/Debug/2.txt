
<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="referrer" content="origin" />
<title>c# https请求 - micDavid - 博客园</title>
<meta property="og:description" content="遇到Https网站，c# http请求的时候，总是报SSL连接错误。后来经搜索，发现有解决方案： .net 2.0 需要引入一个第三方组件：BouncyCastle.dll，这是我写的一个例子： 请求" />
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=-duj5vpGTntb85GJoM3iRI972XwWcI-j8zmqDzyfu2w1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip.css?v=EjExWsdi8Ql8RA7Wdq4_YaeuMVhIAL6d2BSGbilapWY1"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip-mobile.css?v=6NcJHqsIyaE4w19VtgFvCFahrnr2rYCTRRTdxlMDhhQ1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="httpsr://www.cnblogs.com/wangqiang3311/rss"/>
<link t>itle="RSD" type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/wangqiang3311/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/wangqiang3311/wlwmanifest.xml"/>
<script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
<script type="text/javascript">var currentBlogApp = 'wangqiang3311', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="/bundles/blog-common.js?v=oVrWjmbP-rXxVp7O71kev8vWEZCetdwYaIziKHJCYc41" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="https://www.cnblogs.com/wangqiang3311/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/wangqiang3311/">guigui_xi'an city</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">博客园</a></li>
<li><a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/wangqiang3311/">首页</a></li>
<li><a id="blog_nav_newpost" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/micDavid">联系</a></li>
<li><a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/wangqiang3311/rss">订阅</a>
<!--<a id="blog_nav_rss_image" class="aHeaderXML" href="https://www.cnblogs.com/wangqiang3311/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			<div id="blog_stats">
<span id="stats_post_count">随笔 - 99&nbsp; </span>
<span id="stats_article_count">文章 - 0&nbsp; </span>
<span id="stats-comment_count">评论 - 41</span>
</div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/wangqiang3311/p/8986603.html">c# https请求</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body"><p>　　遇到Https网站，c# http请求的时候，总是报SSL连接错误。后来经搜索，发现有解决方案：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;.net 2.0&nbsp; 需要引入一个第三方组件：<strong>BouncyCastle.dll，</strong>这是我写的一个例子：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
<div class="cnblogs_code">
<pre>        <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">string</span> RequestWebServerByTCP(Uri uri, <span style="color: #0000ff">string</span> method, NameValueCollection parameter, <span style="color: #0000ff">string</span><span style="color: #000000"> cookie, Encoding encoding)
        {
            </span><span style="color: #0000ff">try</span><span style="color: #000000">
            {
                StringBuilder RequestHeaders </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> StringBuilder();

                RequestHeaders.Append(method </span>+ <span style="color: #800000">"</span> <span style="color: #800000">"</span> + uri.PathAndQuery + <span style="color: #800000">"</span><span style="color: #800000"> HTTP/1.1\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);

                method </span>=<span style="color: #000000"> method.ToUpper();

                </span><span style="color: #0000ff">if</span> (method ==<span style="color: #000000"> POSTMETHOD)
                    RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">Content-Type:application/x-www-form-urlencoded\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);
                RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">User-Agent:Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);
                RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">Cookie:</span><span style="color: #800000">"</span> + cookie + <span style="color: #800000">"</span><span style="color: #800000">\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);
                RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">Accept:*/*\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);
                RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">Host:</span><span style="color: #800000">"</span> + uri.Host + <span style="color: #800000">"</span><span style="color: #800000">\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);


                </span><span style="color: #0000ff">byte</span>[] postdata = <span style="color: #0000ff">null</span><span style="color: #000000">;
                StringBuilder sb </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> StringBuilder();

                </span><span style="color: #0000ff">if</span> (method ==<span style="color: #000000"> GETMETHOD)
                {
                    uri </span>=<span style="color: #000000"> GetMethodQueryString(uri, parameter, encoding);
                }
                </span><span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (method ==<span style="color: #000000"> POSTMETHOD)
                {
                    </span><span style="color: #0000ff">if</span> (parameter != <span style="color: #0000ff">null</span><span style="color: #000000">)
                    {
                        </span><span style="color: #0000ff">foreach</span> (<span style="color: #0000ff">string</span> key <span style="color: #0000ff">in</span><span style="color: #000000"> parameter)
                        {
                            sb.Append(</span><span style="color: #0000ff">string</span><span style="color: #000000">.Format(FORMATSTR1, System.Web.HttpUtility.UrlEncode(key, encoding), System.Web.HttpUtility.UrlEncode(parameter[key], encoding)));
                        }
                    }
                    </span><span style="color: #0000ff">if</span> (sb.Length != <span style="color: #800080">0</span><span style="color: #000000">)
                    {
                        sb </span>= sb.Remove(sb.Length - <span style="color: #800080">1</span>, <span style="color: #800080">1</span><span style="color: #000000">);
                    }
                    postdata </span>=<span style="color: #000000"> encoding.GetBytes(sb.ToString());

                    RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">Content-Length:</span><span style="color: #800000">"</span> + postdata.Length + <span style="color: #800000">"</span><span style="color: #800000">\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);
                }

                RequestHeaders.Append(</span><span style="color: #800000">"</span><span style="color: #800000">Connection:close\r\n\r\n</span><span style="color: #800000">"</span><span style="color: #000000">);
                </span><span style="color: #0000ff">byte</span>[] req = Encoding.UTF8.GetBytes(RequestHeaders.ToString() +<span style="color: #000000"> sb.ToString());


                </span><span style="color: #0000ff">int</span> port = <span style="color: #800080">443</span><span style="color: #000000">;

                MyTlsClient client </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> MyTlsClient();
                </span><span style="color: #0000ff">var</span> protocol =<span style="color: #000000"> OpenTlsConnection(uri.Host, port, client);

                Stream tlsStream </span>=<span style="color: #000000"> protocol.Stream;
                tlsStream.Write(req, </span><span style="color: #800080">0</span><span style="color: #000000">, req.Length);
                tlsStream.Flush();

                StreamReader reader </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> StreamReader(tlsStream);

                String line;
                StringBuilder html </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> StringBuilder();

                </span><span style="color: #0000ff">string</span> firstLine = <span style="color: #800000">""</span><span style="color: #000000">;

                </span><span style="color: #0000ff">int</span> i = <span style="color: #800080">0</span><span style="color: #000000">;

                </span><span style="color: #0000ff">while</span> ((line = reader.ReadLine()) != <span style="color: #0000ff">null</span><span style="color: #000000">)
                {
                    </span><span style="color: #0000ff">if</span> (i == <span style="color: #800080">0</span><span style="color: #000000">)
                    {
                        firstLine </span>=<span style="color: #000000"> line;
                        i</span>++<span style="color: #000000">;
                    }

                    html.AppendLine(line);

                    </span><span style="color: #0000ff">if</span> (line.Contains(<span style="color: #800000">"</span><span style="color: #800000">&lt;/html&gt;</span><span style="color: #800000">"</span><span style="color: #000000">))
                    {
                        </span><span style="color: #0000ff">break</span><span style="color: #000000">;
                    }
                }
                protocol.Close();

                </span><span style="color: #0000ff">string</span> httpstatusCode = <span style="color: #800000">""</span><span style="color: #000000">;

                </span><span style="color: #0000ff">string</span>[] httpstatus = firstLine.Split(<span style="color: #0000ff">new</span> <span style="color: #0000ff">string</span>[] { <span style="color: #800000">"</span> <span style="color: #800000">"</span><span style="color: #000000"> }, StringSplitOptions.RemoveEmptyEntries);
                </span><span style="color: #0000ff">if</span> (httpstatus.Length &gt; <span style="color: #800080">2</span><span style="color: #000000">)
                {
                    httpstatusCode </span>= httpstatus[<span style="color: #800080">1</span><span style="color: #000000">];
                }
                </span><span style="color: #0000ff">else</span><span style="color: #000000">
                {
                    </span><span style="color: #008000">//</span><span style="color: #008000">请求无效</span>
                    httpstatusCode = <span style="color: #800000">"</span><span style="color: #800000">400</span><span style="color: #800000">"</span><span style="color: #000000">;
                }
                </span><span style="color: #0000ff">return</span><span style="color: #000000"> html.ToString();

            }
            </span><span style="color: #0000ff">catch</span><span style="color: #000000">
            {
                </span><span style="color: #0000ff">return</span> <span style="color: #800000">""</span><span style="color: #000000">;
            }

        }</span></pre>
</div>
<p>　　请求到的html，为什么需要一行一行读呢？我在调试的时候发现有个bug，如果一次性读取的时候，它停不下来，最终报错，所以我做了一个读到html末尾的判断。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;继承了提供的默认类：</p>
<div class="cnblogs_code">
<pre>  <span style="color: #0000ff">class</span><span style="color: #000000"> MyTlsClient : DefaultTlsClient
    {
        </span><span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span><span style="color: #000000"> TlsAuthentication GetAuthentication()
        {
            </span><span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span><span style="color: #000000"> MyTlsAuthentication();
        }
    }

    </span><span style="color: #008000">//</span><span style="color: #008000"> Need class to handle certificate auth  </span>
    <span style="color: #0000ff">class</span><span style="color: #000000"> MyTlsAuthentication : TlsAuthentication
    {
        {
      </span><span style="color: #0000ff">public</span><span style="color: #000000"> TlsCredentials GetClientCredentials(CertificateRequest certificateRequest)
        {
            </span><span style="color: #008000">//</span><span style="color: #008000"> return client certificate  </span>
            <span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span><span style="color: #000000">;
        }

        </span><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span><span style="color: #000000"> NotifyServerCertificate(Certificate serverCertificate)
        {
            </span><span style="color: #008000">//</span><span style="color: #008000"> validate server certificate  </span>
<span style="color: #000000">        }
    }</span></pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>       <span style="color: #0000ff">internal</span> <span style="color: #0000ff">static</span> TlsClientProtocol OpenTlsConnection(<span style="color: #0000ff">string</span> hostname, <span style="color: #0000ff">int</span><span style="color: #000000"> port, TlsClient client)
        {
            TcpClient tcp </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> TcpClient(hostname, port);

            TlsClientProtocol protocol </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> TlsClientProtocol(tcp.GetStream(), secureRandom);
            protocol.Connect(client);
            </span><span style="color: #0000ff">return</span><span style="color: #000000"> protocol;
        }</span></pre>
</div>
<p>拼接url参数的方法：</p>
<div class="cnblogs_code">
<pre>      <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span><span style="color: #000000"> Uri GetMethodQueryString(Uri uri, NameValueCollection parameter, Encoding encoding)
        {
            List</span>&lt;KeyValuePair&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">string</span>&gt;&gt; parameter1 = <span style="color: #0000ff">new</span> List&lt;KeyValuePair&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">string</span>&gt;&gt;<span style="color: #000000">();
            </span><span style="color: #0000ff">foreach</span> (<span style="color: #0000ff">string</span> key <span style="color: #0000ff">in</span><span style="color: #000000"> parameter)
            {
                parameter1.Add(</span><span style="color: #0000ff">new</span> KeyValuePair&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">string</span>&gt;<span style="color: #000000">(key, parameter[key]));
            }
            </span><span style="color: #0000ff">return</span><span style="color: #000000"> GetMethodQueryString(uri, parameter1, encoding);
        }

        </span><span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> Uri GetMethodQueryString(Uri uri, List&lt;KeyValuePair&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">string</span>&gt;&gt;<span style="color: #000000"> parameter, Encoding encoding)
        {
            </span><span style="color: #0000ff">string</span> format = <span style="color: #0000ff">string</span><span style="color: #000000">.Empty;
            UriBuilder uribuilfer </span>= <span style="color: #0000ff">new</span><span style="color: #000000"> UriBuilder(uri);

            </span><span style="color: #0000ff">string</span> QueryString = <span style="color: #0000ff">string</span><span style="color: #000000">.Empty;
            </span><span style="color: #0000ff">if</span> (<span style="color: #0000ff">string</span><span style="color: #000000">.IsNullOrEmpty(uribuilfer.Query))
            {
                format </span>=<span style="color: #000000"> FORMATSTR1;
            }
            </span><span style="color: #0000ff">else</span><span style="color: #000000">
            {
                format </span>=<span style="color: #000000"> FORMATSTR2;
            }
            QueryString </span>=<span style="color: #000000"> uribuilfer.Query;
            </span><span style="color: #0000ff">if</span> (parameter != <span style="color: #0000ff">null</span><span style="color: #000000">)
            {
                </span><span style="color: #0000ff">foreach</span> (KeyValuePair&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">string</span>&gt; item <span style="color: #0000ff">in</span><span style="color: #000000"> parameter)
                {
                    QueryString </span>+= <span style="color: #0000ff">string</span><span style="color: #000000">.Format(format, System.Web.HttpUtility.UrlEncode(item.Key, encoding), System.Web.HttpUtility.UrlEncode(item.Value, encoding));
                }
            }</span>
            QueryString = QueryString.TrimEnd(<span style="color: #0000ff">new</span> <span style="color: #0000ff">char</span>[] { <span style="color: #800000">'</span><span style="color: #800000">&amp;</span><span style="color: #800000">'</span><span style="color: #000000"> });
            QueryString </span>= QueryString.TrimStart(<span style="color: #0000ff">new</span> <span style="color: #0000ff">char</span>[] { <span style="color: #800000">'</span><span style="color: #800000">?</span><span style="color: #800000">'</span><span style="color: #000000"> });
            uribuilfer.Query </span>=<span style="color: #000000"> QueryString;
            uri </span>=<span style="color: #000000"> uribuilfer.Uri;
            </span><span style="color: #0000ff">return</span><span style="color: #000000"> uri;
        }</span></pre>
</div>
<p>&nbsp;　　注意：<strong>List&lt;KeyValuePair&lt;string, string&gt;&gt;</strong>和<strong>NameValueCollection</strong>类型的参数有什么区别呢？它们都包含相同的key，只不过存储的时候，NameValueCollection会把含有相同Key的值用逗号隔开，存在一起。这样请求有可能会失败，拿不到数据。本人因此问题，折腾了很久，用python实现了请求，后来在.net core中实现了一遍，最后终于低下了高傲的头颅，才看到传参时候，有点问题。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;.net&nbsp; 4.0中，只需要添加一句话：<strong>ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;</strong></p>
<p><strong>&nbsp; &nbsp; </strong>&nbsp; &nbsp;.net 4.5中，什么都不用管。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;2.0中连TCP都用上了，不过我们看到了http请求的本质，把一段具有格式的<strong>请求头+请求数据</strong>转为二进制发送到主机的某个端口，返回流，通过读取流，就可以拿到结果。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;说到这，我们来看看Request消息格式：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
<div class="cnblogs_code">
<pre>GET https://www.baidu.com/ HTTP/1.1
Accept: text/html, application/xhtml+xml, */*
Accept-Language: zh-CN
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko
Accept-Encoding: gzip, deflate
Connection: Keep-Alive
Host: www.baidu.com
Cookie: BAIDUID=C1EFC3A3466AAAEBE74C6F6E7F413FA8:FG=1; BIDUPSID=C1EFC3A3466AAAEBE74C6F6E7F413FA8; PSTM=1525339270; BD_LAST_QID=12260391193367555241</pre>
</div>
<p>1、请求行，包含<strong>请求的方法，url，http协议版本</strong></p>
<p>2、请求头，接收的格式，浏览器代理，cookie等等</p>
<p>3、空行</p>
<p>4、请求体，<strong>传递数据</strong></p>
<p>&nbsp;</p>
<p>Response格式：</p>
<div class="cnblogs_code">
<pre>HTTP/1.1 200 OK
Bdpagetype: 1
Bdqid: 0x9a1ff959000016d0
Cache-Control: private
Connection: Keep-Alive
Content-Encoding: gzip
Content-Type: text/html; charset=utf-8
Cxy_all: baidu+77e5655ffd82ce31adf5edff251fc585
Date: Thu, 03 May 2018 09:21:10 GMT
Expires: Thu, 03 May 2018 09:21:03 GMT
Server: BWS/1.1
Set-Cookie: BDSVRTM=0; path=/
Set-Cookie: BD_HOME=0; path=/
Set-Cookie: H_PS_PSSID=1428_21080_20719; path=/; domain=.baidu.com
Strict-Transport-Security: max-age=172800
Vary: Accept-Encoding
X-Powered-By: HPHP
X-Ua-Compatible: IE=Edge,chrome=1
Transfer-Encoding: chunked<br><br>html</pre>
</div>
<p>1、状态行</p>
<p>2、消息报头，content-type,Date,Set-Cookie</p>
<p>3、空行</p>
<p>4、正文</p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2018-05-03 17:34</span> <a href='https://www.cnblogs.com/wangqiang3311/'>micDavid</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=8986603" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(8986603);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=116996,cb_entryId=8986603,cb_blogApp=currentBlogApp,cb_blogUserGuid='cfbecbf0-f704-df11-ba8f-001cf0cd104b',cb_entryCreatedDate='2018/5/3 17:34:00';loadViewCount(cb_entryId);var cb_postType=1;</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<div id='cnblogs_c1' class='c_ad_block'></div>
<div id='under_post_news'></div>
<script async='async' src='https://www.googletagservices.com/tag/js/gpt.js'></script>
<script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script>

<script>
  googletag.cmd.push(function() {
    googletag.defineSlot('/1090369/C2', [468, 60], 'div-gpt-ad-1539008685004-0').addService(googletag.pubads());
    googletag.pubads().enableSingleRequest();
    googletag.enableServices();
  });
</script>
<div id='cnblogs_c2' class='c_ad_block'>
    <div id='div-gpt-ad-1539008685004-0' style='height:60px; width:468px;'>
    <script>
    if (new Date() >= new Date(2018, 9, 13)) {
        googletag.cmd.push(function() { googletag.display('div-gpt-ad-1539008685004-0'); });
    }
    </script>
    </div>
</div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2018 micDavid
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>

</